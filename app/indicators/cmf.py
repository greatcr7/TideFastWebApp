from datetime import datetime, timedelta
import streamlit as st
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pandas as pd
from data.stock import get_stock_prices  # Ensure this module is available
from ta.volume import ChaikinMoneyFlowIndicator
from ta.trend import EMAIndicator
import pytz

# ---------------------------
# CMF Analysis Function
# ---------------------------

def cmf_analysis(ticker):
    st.markdown(f"# üìà Ëî°ÈáëËµÑÈáëÊµÅÈáè (CMF) for {ticker.upper()}")

    # Sidebar for user inputs specific to CMF Analysis
    st.sidebar.header("ÊåáÊ†áÂèÇÊï∞")

    # Function to convert period to start and end dates
    def convert_period_to_dates(period):
        # Define Beijing timezone
        beijing_tz = pytz.timezone('Asia/Shanghai')  # Beijing shares the same timezone as Shanghai

        # Get current time in Beijing
        end_date = datetime.now(beijing_tz)

        # Calculate start date based on the selected period
        if period == "1mo":
            start_date = end_date - timedelta(days=30)
        elif period == "3mo":
            start_date = end_date - timedelta(days=90)
        elif period == "6mo":
            start_date = end_date - timedelta(days=180)
        elif period == "1y":
            start_date = end_date - timedelta(days=365)
        elif period == "2y":
            start_date = end_date - timedelta(days=365*2)
        elif period == "5y":
            start_date = end_date - timedelta(days=365*5)
        elif period == "10y":
            start_date = end_date - timedelta(days=365*10)
        else:
            start_date = end_date

        # Convert to 'YYYY-MM-DD' format
        return start_date.strftime("%Y-%m-%d"), end_date.strftime("%Y-%m-%d")

    # User input function
    def user_input_features():
        period = st.sidebar.selectbox(
            "Êó∂Èó¥Ë∑®Â∫¶ (Time Period)", 
            options=["1mo", "3mo", "6mo", "1y", "2y", "5y", "10y"], 
            index=3
        )
        return convert_period_to_dates(period)

    # Getting user input
    start_date, end_date = user_input_features()

    # Step 1: Fetch Historical Data using custom get_stock_prices function
    df = get_stock_prices(ticker, start_date, end_date)

    if df is None or df.empty:
        st.error("Êú™Ëé∑ÂèñÂà∞Êï∞ÊçÆ„ÄÇËØ∑Ê£ÄÊü•ËÇ°Á•®‰ª£Á†ÅÂπ∂ÈáçËØï„ÄÇ (No data fetched. Please check the ticker symbol and try again.)")
        st.stop()

    # Step 2: User Inputs for CMF Parameters
    st.sidebar.header("CMF ÂèÇÊï∞")

    cmf_period = st.sidebar.number_input(
        "Âë®Êúü (Period)", 
        min_value=1, 
        max_value=100, 
        value=20,  # Common default
        step=1,
        help="Áî®‰∫éËÆ°ÁÆó CMF ÁöÑÂë®Êúü„ÄÇÊé®ËçêÂÄºÔºö20„ÄÇ (The period over which CMF is calculated. Recommended value: 20.)"
    )

    # Additional Parameters
    st.sidebar.header("ÂÖ∂‰ªñÂèÇÊï∞ (Other Parameters)")

    ema_short_window = st.sidebar.number_input(
        "EMA Áü≠ÊúüÁ™óÂè£ (EMA Short Window)", 
        min_value=10, 
        max_value=100, 
        value=50,  # Common default
        step=5,
        help="Áü≠ÊúüÊåáÊï∞ÁßªÂä®Âπ≥ÂùáÁ∫øÔºàEMAÔºâÁöÑÁ™óÂè£Â§ßÂ∞è„ÄÇËæÉÁü≠ÁöÑÁ™óÂè£‰Ωø EMA Êõ¥ÊïèÊÑü„ÄÇÊé®ËçêÂÄºÔºö50„ÄÇ (Short-term EMA window size. A shorter window makes the EMA more sensitive. Recommended value: 50.)"
    )

    ema_long_window = st.sidebar.number_input(
        "EMA ÈïøÊúüÁ™óÂè£ (EMA Long Window)", 
        min_value=100, 
        max_value=300, 
        value=200,  # Common default
        step=10,
        help="ÈïøÊúüÊåáÊï∞ÁßªÂä®Âπ≥ÂùáÁ∫øÔºàEMAÔºâÁöÑÁ™óÂè£Â§ßÂ∞è„ÄÇËæÉÈïøÁöÑÁ™óÂè£‰Ωø EMA Êõ¥Âπ≥Êªë„ÄÇÊé®ËçêÂÄºÔºö200„ÄÇ (Long-term EMA window size. A longer window makes the EMA smoother. Recommended value: 200.)"
    )

    crossover_window = st.sidebar.number_input(
        "‰∫§ÂèâÊ£ÄÊµãÁ™óÂè£ (Crossover Window)", 
        min_value=1, 
        max_value=10, 
        value=1,  # Common default
        step=1,
        help="ÂÆö‰πâÊ£ÄÊµã‰∫§ÂèâÁöÑÊúÄÂ∞èÂ§©Êï∞Ôºå‰ª•ÈÅøÂÖçËôöÂÅá‰ø°Âè∑„ÄÇÊé®ËçêÂÄºÔºö1„ÄÇ (Defines the minimum number of days to detect crossovers to avoid false signals. Recommended value: 1.)"
    )

    # Plotting Options
    st.sidebar.header("ÁªòÂõæÈÄâÈ°π (Plotting Options)")
    show_ema = st.sidebar.checkbox("ÊòæÁ§∫ EMA (Show EMAs)", value=True)
    show_cmf = st.sidebar.checkbox("ÊòæÁ§∫ CMF (Show CMF)", value=True)

    # Calculate CMF using ta
    cmf_indicator = ChaikinMoneyFlowIndicator(
        high=df['high'], 
        low=df['low'], 
        close=df['close'], 
        volume=df['volume'], 
        window=cmf_period
    )
    df['CMF'] = cmf_indicator.chaikin_money_flow()

    # Calculate EMAs using ta
    ema_short_indicator = EMAIndicator(close=df['close'], window=ema_short_window)
    ema_long_indicator = EMAIndicator(close=df['close'], window=ema_long_window)
    df['EMA_Short'] = ema_short_indicator.ema_indicator()
    df['EMA_Long'] = ema_long_indicator.ema_indicator()

    # Identify Crossovers between EMAs
    def identify_crossovers(df, short_col='EMA_Short', long_col='EMA_Long', window=1):
        bullish_crossovers = []
        bearish_crossovers = []

        for i in range(window, len(df)):
            if (df[short_col].iloc[i] > df[long_col].iloc[i]) and (df[short_col].iloc[i - window] <= df[long_col].iloc[i - window]):
                bullish_crossovers.append({
                    'Date': df['date'].iloc[i],
                    'Price': df['close'].iloc[i],
                    short_col: df[short_col].iloc[i],
                    long_col: df[long_col].iloc[i]
                })
            elif (df[short_col].iloc[i] < df[long_col].iloc[i]) and (df[short_col].iloc[i - window] >= df[long_col].iloc[i - window]):
                bearish_crossovers.append({
                    'Date': df['date'].iloc[i],
                    'Price': df['close'].iloc[i],
                    short_col: df[short_col].iloc[i],
                    long_col: df[long_col].iloc[i]
                })

        return bullish_crossovers, bearish_crossovers

    bullish_crossovers, bearish_crossovers = identify_crossovers(df, window=crossover_window)

    # Identify Confluences
    def find_confluence(df, ema_short, ema_long, cmf_col='CMF', price_col='close'):
        latest_cmf = df[cmf_col].iloc[-1]
        latest_ema_short = df['EMA_Short'].iloc[-1]
        latest_ema_long = df['EMA_Long'].iloc[-1]
        latest_price = df[price_col].iloc[-1]

        confluence_levels = {}

        if (latest_cmf > 0) and (df['EMA_Short'].iloc[-1] > df['EMA_Long'].iloc[-1]):
            confluence_levels['Bullish Confluence'] = {
                'CMF': latest_cmf,
                'EMA_Short': latest_ema_short,
                'EMA_Long': latest_ema_long
            }
        elif (latest_cmf < 0) and (df['EMA_Short'].iloc[-1] < df['EMA_Long'].iloc[-1]):
            confluence_levels['Bearish Confluence'] = {
                'CMF': latest_cmf,
                'EMA_Short': latest_ema_short,
                'EMA_Long': latest_ema_long
            }

        return confluence_levels, df

    confluences, df = find_confluence(df, ema_short_window, ema_long_window)

    # Determine Trend
    def determine_trend(df, confluences):
        latest_cmf = df['CMF'].iloc[-1]
        latest_ema_short = df['EMA_Short'].iloc[-1]
        latest_ema_long = df['EMA_Long'].iloc[-1]
        latest_price = df['close'].iloc[-1]

        if (latest_cmf > 0) and (latest_ema_short > latest_ema_long) and (latest_price > latest_ema_short):
            trend = "‰∏äÂçáË∂ãÂäø (Uptrend)"
        elif (latest_cmf < 0) and (latest_ema_short < latest_ema_long) and (latest_price < latest_ema_short):
            trend = "‰∏ãÈôçË∂ãÂäø (Downtrend)"
        else:
            trend = "ÈúáËç°Âå∫Èó¥ (Sideways)"

        return trend, latest_price

    trend, current_price = determine_trend(df, confluences)

    # Step 3: Plot Using Plotly
    def plot_cmf(df, bullish_crossovers, bearish_crossovers, confluences, ticker, show_ema=True, show_cmf=True):
        """
        Plot the CMF along with price data and EMAs using Plotly.
        """
        fig = make_subplots(
            rows=2, cols=1, shared_xaxes=True,
            vertical_spacing=0.05, 
            subplot_titles=(f'{ticker}ÁöÑËÇ°‰ª∑ÂíåÁßªÂä®Âπ≥ÂùáÁ∫ø (Price and EMAs)', 'Chaikin Money Flow (CMF)'),
            row_width=[0.2, 0.7]
        )

        # Candlestick for Price
        fig.add_trace(
            go.Candlestick(
                x=df['date'],
                open=df['open'],
                high=df['high'],
                low=df['low'],
                close=df['close'],
                name='Price'
            ), 
            row=1, col=1
        )

        # EMAs
        if show_ema:
            fig.add_trace(
                go.Scatter(
                    x=df['date'], 
                    y=df['EMA_Short'], 
                    line=dict(color='blue', width=1), 
                    name=f'EMA{ema_short_window}'
                ), 
                row=1, col=1
            )
            fig.add_trace(
                go.Scatter(
                    x=df['date'], 
                    y=df['EMA_Long'], 
                    line=dict(color='purple', width=1), 
                    name=f'EMA{ema_long_window}'
                ), 
                row=1, col=1
            )

        # CMF Line
        if show_cmf:
            fig.add_trace(
                go.Scatter(
                    x=df['date'], 
                    y=df['CMF'], 
                    line=dict(color='orange', width=2), 
                    name='CMF'
                ), 
                row=2, col=1
            )
            # Add zero line
            fig.add_hline(
                y=0, 
                line=dict(color='gray', dash='dash'), 
                row=2, col=1
            )

        # Crossovers Markers on Price Chart
        crossover_dates_bull = [div['Date'] for div in bullish_crossovers]
        crossover_prices_bull = [div['Price'] for div in bullish_crossovers]
        crossover_dates_bear = [div['Date'] for div in bearish_crossovers]
        crossover_prices_bear = [div['Price'] for div in bearish_crossovers]

        fig.add_trace(
            go.Scatter(
                mode='markers', 
                x=crossover_dates_bull, 
                y=crossover_prices_bull,
                marker=dict(color='green', size=10, symbol='triangle-up'),
                name='ÁúãÊ∂®‰∫§Âèâ (Bullish Crossover)'
            ), 
            row=1, col=1
        )
        fig.add_trace(
            go.Scatter(
                mode='markers', 
                x=crossover_dates_bear, 
                y=crossover_prices_bear,
                marker=dict(color='red', size=10, symbol='triangle-down'),
                name='ÁúãË∑å‰∫§Âèâ (Bearish Crossover)'
            ), 
            row=1, col=1
        )

        # Highlight Confluence Zones on Price Chart
        for key, value in confluences.items():
            if key == 'Bullish Confluence':
                color = 'green'
                annotation_text = 'ÁúãÊ∂®ÂÖ±ÊåØÂå∫ (Bullish Confluence)'
            elif key == 'Bearish Confluence':
                color = 'red'
                annotation_text = 'ÁúãË∑åÂÖ±ÊåØÂå∫ (Bearish Confluence)'
            else:
                color = 'yellow'
                annotation_text = 'ÂÖ±ÊåØÂå∫ (Confluence)'

            fig.add_hline(
                y=value['EMA_Short'], 
                line=dict(color=color, dash='dot'), 
                row=1, col=1,
                annotation_text=annotation_text,
                annotation_position="top left"
            )

        # Update Layout
        fig.update_layout(
            title=f"{ticker} ÁöÑ Chaikin Money Flow (CMF) ÂàÜÊûê",
            yaxis_title='‰ª∑Ê†º (Price)',
            xaxis_title='',
            template='plotly_dark',
            showlegend=True,
            height=900
        )

        fig.update_xaxes(rangeslider_visible=False)

        return fig

    fig = plot_cmf(df, bullish_crossovers, bearish_crossovers, confluences, ticker, show_ema=show_ema, show_cmf=show_cmf)
    st.plotly_chart(fig, use_container_width=True)

    # Step 4: Detailed Actionable Interpretation in Both English and Chinese
    def detailed_interpretation(bullish_crossovers, bearish_crossovers, confluences, current_price, trend):
        """
        Provide a detailed, actionable interpretation based on CMF and crossovers in both English and Chinese.
        """
        interpretation_en = ""
        interpretation_cn = ""

        # 1. Trend Analysis
        interpretation_en += f"###### Current Market Trend: {trend}\n\n"
        interpretation_en += f"**Current Price**: {current_price:.2f}\n\n"

        interpretation_cn += f"###### ÂΩìÂâçÂ∏ÇÂú∫Ë∂ãÂäøÔºö{trend}\n\n"
        interpretation_cn += f"**ÂΩìÂâç‰ª∑Ê†º**Ôºö{current_price:.2f}\n\n"

        # 2. Confluence Analysis
        if confluences:
            interpretation_en += "###### Confluence Zones Detected:\n"
            interpretation_cn += "###### Ê£ÄÊµãÂà∞ÁöÑÂÖ±ÊåØÂå∫Ôºö\n"
            for key, indicators in confluences.items():
                if key == 'Bullish Confluence':
                    interpretation_en += f"- **Bullish Confluence**: CMF is positive, EMA{ema_short_window} ({indicators['EMA_Short']:.2f}) is above EMA{ema_long_window} ({indicators['EMA_Long']:.2f}), and the price is above EMA{ema_short_window}.\n"
                    interpretation_cn += f"- **ÁúãÊ∂®ÂÖ±ÊåØÂå∫**ÔºöCMF ‰∏∫Ê≠£ÔºåEMA{ema_short_window} ({indicators['EMA_Short']:.2f}) È´ò‰∫é EMA{ema_long_window} ({indicators['EMA_Long']:.2f})Ôºå‰∏î‰ª∑Ê†ºÈ´ò‰∫é EMA{ema_short_window}„ÄÇ\n"
                elif key == 'Bearish Confluence':
                    interpretation_en += f"- **Bearish Confluence**: CMF is negative, EMA{ema_short_window} ({indicators['EMA_Short']:.2f}) is below EMA{ema_long_window} ({indicators['EMA_Long']:.2f}), and the price is below EMA{ema_short_window}.\n"
                    interpretation_cn += f"- **ÁúãË∑åÂÖ±ÊåØÂå∫**ÔºöCMF ‰∏∫Ë¥üÔºåEMA{ema_short_window} ({indicators['EMA_Short']:.2f}) ‰Ωé‰∫é EMA{ema_long_window} ({indicators['EMA_Long']:.2f})Ôºå‰∏î‰ª∑Ê†º‰Ωé‰∫é EMA{ema_short_window}„ÄÇ\n"
            interpretation_en += "\n"
            interpretation_cn += "\n"
        else:
            interpretation_en += "###### No Confluence Zones Detected.\n\n"
            interpretation_cn += "###### Êú™Ê£ÄÊµãÂà∞ÂÖ±ÊåØÂå∫„ÄÇ\n\n"

        # 3. CMF Analysis
        latest_cmf = df['CMF'].iloc[-1]
        interpretation_en += f"###### Chaikin Money Flow (CMF): {latest_cmf:.4f}\n\n"
        interpretation_cn += f"###### Chaikin Money Flow (CMF)Ôºö{latest_cmf:.4f}\n\n"

        if latest_cmf > 0:
            interpretation_en += "- **Positive CMF**: Indicates buying pressure is dominant.\n"
            interpretation_cn += "- **Ê≠£ÁöÑ CMF**ÔºöË°®Êòé‰π∞ÁõòÂéãÂäõÂç†‰ºò„ÄÇ\n"
        elif latest_cmf < 0:
            interpretation_en += "- **Negative CMF**: Indicates selling pressure is dominant.\n"
            interpretation_cn += "- **Ë¥üÁöÑ CMF**ÔºöË°®ÊòéÂçñÁõòÂéãÂäõÂç†‰ºò„ÄÇ\n"
        else:
            interpretation_en += "- **Neutral CMF**: No clear buying or selling pressure.\n"
            interpretation_cn += "- **‰∏≠ÊÄßÁöÑ CMF**ÔºöÊó†ÊòéÊòæÁöÑ‰π∞ÁõòÊàñÂçñÁõòÂéãÂäõ„ÄÇ\n"

        interpretation_en += "\n"
        interpretation_cn += "\n"

        # 4. Price Position Analysis
        interpretation_en += "###### Price Position Relative to EMAs:\n"
        interpretation_cn += "###### ÂΩìÂâç‰ª∑Ê†ºÁõ∏ÂØπ‰∫é EMA ÁöÑ‰ΩçÁΩÆÔºö\n"
        if trend == "‰∏äÂçáË∂ãÂäø (Uptrend)":
            interpretation_en += f"- The current price is **above** EMA{ema_short_window} and EMA{ema_long_window}, indicating strong bullish momentum.\n"
            interpretation_cn += f"- ÂΩìÂâç‰ª∑Ê†º **È´ò‰∫é** EMA{ema_short_window} Âíå EMA{ema_long_window}ÔºåË°®ÊòéÂº∫Âä≤ÁöÑÁúãÊ∂®Âä®ËÉΩ„ÄÇ\n"
        elif trend == "‰∏ãÈôçË∂ãÂäø (Downtrend)":
            interpretation_en += f"- The current price is **below** EMA{ema_short_window} and EMA{ema_long_window}, indicating strong bearish momentum.\n"
            interpretation_cn += f"- ÂΩìÂâç‰ª∑Ê†º **‰Ωé‰∫é** EMA{ema_short_window} Âíå EMA{ema_long_window}ÔºåË°®ÊòéÂº∫Âä≤ÁöÑÂçñÂá∫Âä®ËÉΩ„ÄÇ\n"
        else:
            interpretation_en += f"- The current price is **between** EMA{ema_short_window} and EMA{ema_long_window}, indicating a consolidating market.\n"
            interpretation_cn += f"- ÂΩìÂâç‰ª∑Ê†º **‰Ωç‰∫é** EMA{ema_short_window} Âíå EMA{ema_long_window} ‰πãÈó¥ÔºåË°®ÊòéÂ∏ÇÂú∫Âú®Êï¥Âêà‰∏≠„ÄÇ\n"
        interpretation_en += "\n"
        interpretation_cn += "\n"

        # 5. Actionable Recommendations
        interpretation_en += "###### Actionable Recommendations:\n"
        interpretation_cn += "###### ÂèØÊìç‰ΩúÁöÑÂª∫ËÆÆÔºö\n"

        # Bullish Confluence
        if 'Bullish Confluence' in confluences:
            interpretation_en += "- **Buying Opportunity**: Consider buying when CMF is positive, EMA{ema_short_window} is above EMA{ema_long_window}, and the price is above EMA{ema_short_window}, confirming strong bullish momentum.\n"
            interpretation_cn += "- **‰π∞ÂÖ•Êú∫‰ºö**ÔºöÂΩì CMF ‰∏∫Ê≠£ÔºåEMA{ema_short_window} È´ò‰∫é EMA{ema_long_window}Ôºå‰∏î‰ª∑Ê†ºÈ´ò‰∫é EMA{ema_short_window}ÔºåÁ°ÆËÆ§Âº∫Âä≤ÁöÑÁúãÊ∂®Âä®ËÉΩÊó∂ÔºåËÄÉËôë‰π∞ÂÖ•„ÄÇ\n"

        # Bearish Confluence
        if 'Bearish Confluence' in confluences:
            interpretation_en += "- **Selling Opportunity**: Consider selling when CMF is negative, EMA{ema_short_window} is below EMA{ema_long_window}, and the price is below EMA{ema_short_window}, confirming strong bearish momentum.\n"
            interpretation_cn += "- **ÂçñÂá∫Êú∫‰ºö**ÔºöÂΩì CMF ‰∏∫Ë¥üÔºåEMA{ema_short_window} ‰Ωé‰∫é EMA{ema_long_window}Ôºå‰∏î‰ª∑Ê†º‰Ωé‰∫é EMA{ema_short_window}ÔºåÁ°ÆËÆ§Âº∫Âä≤ÁöÑÂçñÂá∫Âä®ËÉΩÊó∂ÔºåËÄÉËôëÂçñÂá∫„ÄÇ\n"

        # Bullish Crossovers
        if bullish_crossovers:
            interpretation_en += "\n- **Bullish Crossover Detected**: EMA{ema_short_window} has crossed above EMA{ema_long_window}, indicating potential upward trend. Consider entering a long position when confirmed by bullish candlestick patterns.\n"
            interpretation_cn += "\n- **Ê£ÄÊµãÂà∞ÁúãÊ∂®‰∫§Âèâ**ÔºöEMA{ema_short_window} Â∑≤Áªè‰∏äÁ©ø EMA{ema_long_window}ÔºåË°®ÊòéÂèØËÉΩÂá∫Áé∞‰∏äÂçáË∂ãÂäø„ÄÇÂΩìÈÄöËøáÁúãÊ∂®ÁöÑÁÉõÂè∞ÂΩ¢ÊÄÅÁ°ÆËÆ§Êó∂ÔºåËÄÉËôë‰π∞ÂÖ•„ÄÇ\n"

        # Bearish Crossovers
        if bearish_crossovers:
            interpretation_en += "\n- **Bearish Crossover Detected**: EMA{ema_short_window} has crossed below EMA{ema_long_window}, indicating potential downward trend. Consider entering a short position when confirmed by bearish candlestick patterns.\n"
            interpretation_cn += "\n- **Ê£ÄÊµãÂà∞ÁúãË∑å‰∫§Âèâ**ÔºöEMA{ema_short_window} Â∑≤Áªè‰∏ãÁ©ø EMA{ema_long_window}ÔºåË°®ÊòéÂèØËÉΩÂá∫Áé∞‰∏ãÈôçË∂ãÂäø„ÄÇÂΩìÈÄöËøáÁúãË∑åÁöÑÁÉõÂè∞ÂΩ¢ÊÄÅÁ°ÆËÆ§Êó∂ÔºåËÄÉËôëÂçñÂá∫„ÄÇ\n"

        # Confluence Zones
        if confluences:
            interpretation_en += "\n- **Confluence Zones**: Trades near these areas have a higher probability of success due to the alignment of CMF with EMAs.\n"
            interpretation_cn += "\n- **ÂÖ±ÊåØÂå∫**ÔºöÁî±‰∫é CMF ‰∏é EMA ÂØπÈΩêÔºåÊé•ËøëËøô‰∫õÂå∫ÂüüÁöÑ‰∫§ÊòìÊàêÂäüÊ¶ÇÁéáÊõ¥È´ò„ÄÇ\n"

        # Risk Management
        interpretation_en += "\n###### Risk Management:\n"
        interpretation_cn += "\n###### È£éÈô©ÁÆ°ÁêÜÔºö\n"
        interpretation_en += "- **Stop-Loss**: Place stop-loss orders just beyond EMA{ema_short_window} or EMA{ema_long_window} to manage risk.\n"
        interpretation_cn += "- **Ê≠¢Êçü**ÔºöÂú® EMA{ema_short_window} Êàñ EMA{ema_long_window} ‰πãÂ§ñÁ®çÂæÆÊîæÁΩÆÊ≠¢ÊçüËÆ¢Âçï‰ª•ÁÆ°ÁêÜÈ£éÈô©„ÄÇ\n"
        interpretation_en += "- **Take-Profit**: Set target levels based on recent support/resistance levels or use a trailing stop to lock in profits.\n"
        interpretation_cn += "- **Ê≠¢Áõà**ÔºöÊ†πÊçÆËøëÊúüÁöÑÊîØÊíë/ÈòªÂäõ‰ΩçËÆæÁΩÆÁõÆÊ†áÊ∞¥Âπ≥Êàñ‰ΩøÁî®ÁßªÂä®Ê≠¢Áõà‰ª•ÈîÅÂÆöÂà©Ê∂¶„ÄÇ\n"

        # Market Conditions
        interpretation_en += "\n###### Optimal Market Conditions for Applying This Strategy:\n"
        interpretation_cn += "\n###### Â∫îÁî®Ê≠§Á≠ñÁï•ÁöÑÊúÄ‰Ω≥Â∏ÇÂú∫Êù°‰ª∂Ôºö\n"
        interpretation_en += "- **Trending Markets**: Most effective in clear uptrends or downtrends where CMF and EMAs confirm the direction.\n"
        interpretation_cn += "- **Ë∂ãÂäøÂ∏ÇÂú∫**ÔºöÂú® CMF Âíå EMA Á°ÆËÆ§ÊñπÂêëÁöÑÊòéÊòæ‰∏äÂçáÊàñ‰∏ãÈôçË∂ãÂäø‰∏≠ÊúÄ‰∏∫ÊúâÊïà„ÄÇ\n"
        interpretation_en += "- **High Volume**: Ensure significant price movements are supported by high volume to validate CMF signals.\n"
        interpretation_cn += "- **È´òÊàê‰∫§Èáè**ÔºöÁ°Æ‰øùÈáçË¶ÅÁöÑ‰ª∑Ê†ºÊ≥¢Âä®Áî±È´òÊàê‰∫§ÈáèÊîØÊåÅÔºå‰ª•È™åËØÅ CMF ‰ø°Âè∑„ÄÇ\n"
        interpretation_en += "- **Avoid in Sideways/Noisy Markets**: CMF may produce false signals in choppy or non-trending markets.\n"
        interpretation_cn += "- **ÈÅøÂÖçÂú®Ê®™Áõò/ÂòàÊùÇÂ∏ÇÂú∫**ÔºöÂú®Ê≥¢Âä®ÂâßÁÉàÊàñÊó†Ë∂ãÂäøÁöÑÂ∏ÇÂú∫‰∏≠ÔºåCMF ÂèØËÉΩ‰∫ßÁîüËôöÂÅá‰ø°Âè∑„ÄÇ\n"

        return interpretation_en, interpretation_cn

    interpret_en, interpret_cn = detailed_interpretation(
        bullish_crossovers, bearish_crossovers, confluences, current_price, trend
    )

    # Display Interpretations
    st.markdown("##### üìÑ ÊåáÊ†áËß£ËØª")

    # Tabs for English and Chinese
    tab1, tab2 = st.tabs(["‰∏≠Êñá", "English"])

    with tab1:
        st.markdown(interpret_cn)

    with tab2:
        st.markdown(interpret_en)

    # Optional: Display Data Table
    with st.expander("üìä Êü•ÁúãÂéüÂßãÊï∞ÊçÆ (View Raw Data)"):
        st.dataframe(df)

